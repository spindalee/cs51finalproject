(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)
    
open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error *)
exception EvalError of string ;;
(* Exception for evaluator runtime, generated by an explicit "raise" construct *)
exception EvalException ;;
(* Exception for evaluator runtime, generated by a type error *)
exception TypeError of string ;;
(* Exception for evaluator runtime, generated by unused match cases *)
exception ImpossibleCase ;;


(*......................................................................
  Environments and values 
 *)

module type Env_type = sig
    type env
    type value =
      | Val of expr
      | Closure of (expr * env)
    val create : unit -> env
    val close : expr -> env -> value
    val lookup : env -> varid -> value
    val extend : env -> varid -> value ref -> env
    val env_to_string : env -> string
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : Env_type =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    (* Creates an empty environment *)
    let create () : env = [] ;;

    (* Creates a closure from an expression and the environment it's
       defined in *)
    let close (exp : expr) (env : env) : value =
      Closure (exp, env) ;;

    (* Looks up the value of a variable in the environment *)
    let lookup (env : env) (varname : varid) : value =
			try
				!(List.assoc varname env)
			with
			| Not_found -> raise (EvalError "variable has no value")

    (* Returns a new environment just like env except that it maps the
       variable varid to loc *)
    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: (List.remove_assoc varname env) ;;

    (* Returns a printable string representation of a value; the flag
       printenvp determines whether to include the environment in the
       string representation when called on a closure *)
    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
			match v with
			| Val e -> exp_to_concrete_string e
			| Closure (exp, env) -> 
					if printenvp then exp_to_concrete_string exp ^ env_to_string env
					else exp_to_concrete_string exp

    (* Returns a printable string representation of an environment *)
    and env_to_string (env : env) : string =
			match env with
			| [] -> ""
			| (var, valref) :: tl -> 
			    var ^ value_to_string !valref ^ env_to_string tl ;;
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below, evaluates an expression exp
  in an enviornment env returning a result of type value. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a value and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type expr -> Env.env -> Env.value for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as eval_e below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* Helper functions to evaluate unops and binops *)
let unopeval (v : unop) (e1 : Env.value) : Env.value =
	match v, e1 with
	| Negate, Env.Val Num n -> Env.Val (Num (~- n))
	| Negate, _ -> raise (TypeError "can't negate non-ints or non-bools") ;;

let binopeval (v : binop) (e1 : Env.value) (e2 : Env.value) : Env.value =
	match v, e1, e2 with
	| Plus, Env.Val Num x1, Env.Val Num x2 -> Env.Val (Num (x1 + x2))
	| Plus, _, _ -> raise (TypeError "can't add non-integers")
	| Minus, Env.Val Num x1, Env.Val Num x2 -> Env.Val (Num (x1 - x2))
	| Minus, _, _ -> raise (TypeError "can't subtract non-integers")
	| Times, Env.Val Num x1, Env.Val Num x2 -> Env.Val (Num (x1 * x2))
	| Times, _, _ -> raise (TypeError "can't multiply non-integers")
	| Equals, Env.Val Num x1, Env.Val Num x2 -> Env.Val (Bool (x1 = x2))
	| Equals, Env.Val Bool b1, Env.Val Bool b2 -> Env.Val (Bool (b1 = b2))
	| Equals, _, _ -> raise (TypeError "can't equal non-integers") 
	| LessThan, Env.Val Num x1, Env.Val Num x2 -> Env.Val (Bool (x1 < x2))
	| LessThan, _, _ -> raise (TypeError "can't compare non-integers") ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)

let rec eval_s (exp : expr) (_env : Env.env) : Env.value =
	match exp with
	| Var _ -> raise (EvalError "can't evaluate unbound variable")
	| Num _ | Bool _ | Fun _ | Unassigned -> Env.Val exp
	| Unop (v, e1) -> unopeval v (eval_s e1 _env)
	| Binop (v, e1, e2) -> binopeval v (eval_s e1 _env) (eval_s e2 _env)
	| Conditional (e1, e2, e3) ->
			(match eval_s e1 _env with
			 | Env.Val Bool b -> if b then eval_s e2 _env else eval_s e3 _env
			 | _ -> raise (TypeError "can't evaluate non-bools in conditional"))
	| Let (v, d, b) -> eval_s (App (Fun (v, b), d)) _env
	| Letrec (v, d, b) ->
			let Env.Val vd = eval_s d _env in
			let evalrec = Letrec (v, vd, Var v) in
			eval_s (subst v (subst v evalrec vd) b) _env
	| Raise -> raise EvalException
	| RaiseExn -> raise ImpossibleCase
	| App (f, d) ->
			(match eval_s f _env with
			| Env.Val Fun (v, e) -> 
					let Env.Val vd = eval_s d _env in
					eval_s (subst v vd e) _env
			| _ -> Env.Val RaiseExn) ;;
		 
(* THE EVALUATION HELPER ABSTRACTOR -- abstracts away commonalities *)
let rec eval_h (exp : expr) 
							 (env : Env.env) 
							 (eval : expr -> Env.env -> Env.value) 
							 : Env.value =
	match exp with
	| Var x -> Env.lookup env x
	| Num _ | Bool _ | Unassigned -> Env.Val exp
	| Unop (v, e1) -> unopeval v (eval_h e1 env eval)
	| Binop (v, e1, e2) -> binopeval v (eval_h e1 env eval) (eval_h e2 env eval)
	| Conditional (e1, e2, e3) ->
			(match eval_h e1 env eval with
			| Env.Val Bool b -> if b then eval_h e2 env eval else eval_h e3 env eval
			| _ -> raise (TypeError "can't evaluate non-bools in conditional"))
	| Let (v, d, b) -> eval_h (App (Fun (v, b), d)) env eval
	| Letrec (v, d, b) ->
			let temp = ref (Env.Val Unassigned) in
			let new_env = Env.extend env v temp in
			temp := eval_h d new_env eval;
			eval_h b new_env eval
	| Raise -> raise EvalException
	| RaiseExn -> raise ImpossibleCase
	| _ -> eval exp env ;;

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let rec eval_d (exp : expr) (env : Env.env) : Env.value =
	match exp with
	| Fun _ -> Env.Val exp
	| App (f, d) ->
			(match eval_d f env with
			| Env.Val Fun (v, e) ->
					let eval_def = eval_d d env in
					eval_d e (Env.extend env v (ref eval_def))
			| _ -> Env.Val RaiseExn)
	| _ -> eval_h exp env eval_d ;;
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let rec eval_l (exp : expr) (env : Env.env) : Env.value =
	match exp with
	| Fun _ -> Env.close exp env
	| App (f, d) ->
			(match eval_l f env with
			| Closure (Fun (v, e), en) ->
					let evaldef = ref (eval_l d env) in
					let new_env = Env.extend en v evaldef in
					eval_l e new_env
			| Val _ -> Env.Val RaiseExn)
	| _ -> eval_h exp env eval_l ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within eval_s, eval_d, or eval_l. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   miniml.ml uses a call to the single function evaluate defined
   here. Initially, evaluate is the trivial evaluator eval_t. But you
   can define it to use any of the other evaluators as you proceed to
   implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)
   
let evaluate = eval_t ;;
